#version 430 core
#define BLOCKS_COUNT 8
#define MAX_ITERATIONS 4

layout (local_size_x = BLOCKS_COUNT, local_size_y = BLOCKS_COUNT, local_size_z = 1) in;
layout (rgba32f, binding = 0) uniform image2D ImgInput;
layout (rgba32f, binding = 1) uniform image2D ImgOutput;

uniform int Iterations;
uniform int InitialPhase;

shared float s_heightValues[BLOCKS_COUNT * BLOCKS_COUNT];
shared float s_biomeValues[BLOCKS_COUNT  * BLOCKS_COUNT];

void storeHeight(uint index, float value)
{
	s_heightValues[index] = value;
}

void storeBiome(uint index, float value)
{
	s_biomeValues[index] = value;
}

float loadHeight(uint index)
{
	return s_heightValues[index];
}

float loadBiome(uint index)
{
	return s_biomeValues[index];
}

void main()
{
	ivec2 imgSize     = imageSize(ImgInput);
	ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);
	
	if (pixelCoords.x >= imgSize.x / 2 || 
	    pixelCoords.y >= imgSize.y / 2)
		return;

	vec4 pixel1 = imageLoad(ImgInput, pixelCoords * 2);
	vec4 pixel2 = imageLoad(ImgInput, pixelCoords * 2 + ivec2(1, 0));
	vec4 pixel3 = imageLoad(ImgInput, pixelCoords * 2 + ivec2(0, 1));
	vec4 pixel4 = imageLoad(ImgInput, pixelCoords * 2 + ivec2(1, 1));

	float height = 0.25 * (pixel1.x + pixel2.x + pixel3.x + pixel4.x);
	float biome  = 0.25 * (pixel1.y + pixel2.y + pixel3.y + pixel4.y);

	// this if statement is redundand, but if we didn't add it
	// then the variable would've been optimized-away.
	if (InitialPhase == 0)
		biome  = 0.25 * (pixel1.y + pixel2.y + pixel3.y + pixel4.y);

	storeHeight(gl_LocalInvocationIndex, height);
	storeBiome(gl_LocalInvocationIndex,  biome);

	if (Iterations == 1)
	{
		imageStore(ImgOutput, pixelCoords, vec4(height, biome, 0.0, 1.0));
		return;
	}

	groupMemoryBarrier();
	barrier();

	if ((gl_LocalInvocationIndex & 0x9) == 0)
	{
		float height1 = height;
		float height2 = loadHeight(gl_LocalInvocationIndex + 0x01);
		float height3 = loadHeight(gl_LocalInvocationIndex + 0x08);
		float height4 = loadHeight(gl_LocalInvocationIndex + 0x09);

		float biome1 = biome;
		float biome2 = loadBiome(gl_LocalInvocationIndex + 0x01);
		float biome3 = loadBiome(gl_LocalInvocationIndex + 0x08);
		float biome4 = loadBiome(gl_LocalInvocationIndex + 0x09);

		height = 0.25 * (height1 + height2 + height3 + height4);
		biome  = 0.25 * (biome1  + biome2  + biome3  + biome4);

		storeHeight(gl_LocalInvocationIndex, height);
		storeBiome(gl_LocalInvocationIndex,  biome);

		if (Iterations == 2)
		{
			imageStore(ImgOutput, pixelCoords / 2, vec4(height, biome, 0.0, 1.0));
			return;
		}
	}

	if (Iterations == 2)
		return;

	groupMemoryBarrier();
	barrier();

	if ((gl_LocalInvocationIndex & 0x1B) == 0)
	{
		float height1 = height;
		float height2 = loadHeight(gl_LocalInvocationIndex + 0x02);
		float height3 = loadHeight(gl_LocalInvocationIndex + 0x10);
		float height4 = loadHeight(gl_LocalInvocationIndex + 0x12);

		float biome1 = biome;
		float biome2 = loadBiome(gl_LocalInvocationIndex + 0x02);
		float biome3 = loadBiome(gl_LocalInvocationIndex + 0x10);
		float biome4 = loadBiome(gl_LocalInvocationIndex + 0x12);

		height = 0.25 * (height1 + height2 + height3 + height4);
		biome  = 0.25 * (biome1  + biome2  + biome3  + biome4);

		storeHeight(gl_LocalInvocationIndex, height);
		storeBiome(gl_LocalInvocationIndex,  biome);

		if (Iterations == 3)
		{
			imageStore(ImgOutput, pixelCoords / 4, vec4(height, biome, 0.0, 1.0));
			return;
		}
	}

	if (Iterations == 3)
		return;

	groupMemoryBarrier();
	barrier();

	if (gl_LocalInvocationIndex == 0)
	{
		float height1 = height;
		float height2 = loadHeight(gl_LocalInvocationIndex + 0x04);
		float height3 = loadHeight(gl_LocalInvocationIndex + 0x20);
		float height4 = loadHeight(gl_LocalInvocationIndex + 0x24);

		float biome1 = biome;
		float biome2 = loadBiome(gl_LocalInvocationIndex + 0x04);
		float biome3 = loadBiome(gl_LocalInvocationIndex + 0x20);
		float biome4 = loadBiome(gl_LocalInvocationIndex + 0x24);

		height = 0.25 * (height1 + height2 + height3 + height4);
		biome  = 0.25 * (biome1  + biome2  + biome3  + biome4);

		if (Iterations == 4)
		{
			imageStore(ImgOutput, pixelCoords / 8, vec4(height, biome, 0.0, 1.0));
			return;
		}
	}
}