#version 430 core
#define BLOCKS_COUNT             8

#define MAX_CELLS_WIDTH          10
#define MAX_TOTAL_LAYER_CELLS    (MAX_CELLS_WIDTH * MAX_CELLS_WIDTH * MAX_CELLS_WIDTH)

layout (local_size_x = BLOCKS_COUNT, local_size_y = BLOCKS_COUNT, local_size_z = BLOCKS_COUNT) in;
layout (rgba32f, binding = 0) uniform image3D ImgOutput;

layout (std140, binding = 1) uniform PointsPositions
{
    vec4 Points[MAX_TOTAL_LAYER_CELLS * 3];
};

layout(std140, binding = 2) buffer MinMaxValues
{
	int Mn;
	int Mx;
};

uniform int   MinMaxBufferValue;

uniform int   Tiles;
uniform float Persistance;

uniform int   NumCellsA;
uniform int   NumCellsB;
uniform int   NumCellsC;

uniform vec4  ChannelsMask;

ivec3 offsets[] = 
{
	// bottom cells
	ivec3(-1, -1, -1),
	ivec3( 0, -1, -1),
	ivec3( 1, -1, -1),
	ivec3(-1, -1,  0),
	ivec3( 0, -1,  0),
	ivec3( 1, -1,  0),
	ivec3(-1, -1,  1),
	ivec3( 0, -1,  1),
	ivec3( 1, -1,  1),

	// same level cells
	ivec3(-1,  0, -1),
	ivec3( 0,  0, -1),
	ivec3( 1,  0, -1),
	ivec3(-1,  0,  0),
	ivec3( 0,  0,  0),
	ivec3( 1,  0,  0),
	ivec3(-1,  0,  1),
	ivec3( 0,  0,  1),
	ivec3( 1,  0,  1),

	// top cells
	ivec3(-1,  1, -1),
	ivec3( 0,  1, -1),
	ivec3( 1,  1, -1),
	ivec3(-1,  1,  0),
	ivec3( 0,  1,  0),
	ivec3( 1,  1,  0),
	ivec3(-1,  1,  1),
	ivec3( 0,  1,  1),
	ivec3( 1,  1,  1),
};

int minValue(ivec3 vec)
{
	return min(vec.x, min(vec.y, vec.z));
}

int maxValue(ivec3 vec)
{
	return max(vec.x, max(vec.y, vec.z));
}

float worley(int startIndex, int numCells, vec3 referencePosition)
{
	      referencePosition = mod(referencePosition * Tiles, 1.0);
	ivec3 referenceCell     = ivec3(floor(referencePosition * numCells));
	float minSqrDist        = 1.0;

	for (int offset = 0; offset < 27; offset++)
	{
		ivec3 currentCell = referenceCell + offsets[offset];
		if (minValue(currentCell) == -1 || maxValue(currentCell) == numCells)
		{
			ivec3 wrappedCell   = (currentCell + numCells) % ivec3(numCells, numCells, numCells);
			int   baseIndex     = (wrappedCell.z * numCells * numCells + wrappedCell.y * numCells + wrappedCell.x);
			int   adjustedIndex = startIndex + baseIndex;

			vec3  point         = Points[adjustedIndex].xyz;

			for (int wrappedOffset = 0; wrappedOffset < 27; wrappedOffset++)
			{
				vec3 direction  = referencePosition - (point + offsets[wrappedOffset]);
				     minSqrDist = min(minSqrDist, dot(direction, direction));
			}
		}
		else
		{
			int  baseIndex     = (currentCell.z * numCells * numCells + currentCell.y * numCells + currentCell.x);
			int  adjustedIndex = startIndex + baseIndex;
			vec3 point         = Points[adjustedIndex].xyz;
			vec3 direction     = referencePosition - point;
			     minSqrDist    = min(minSqrDist, dot(direction, direction));
		}
	}

	return sqrt(minSqrDist);
}

void main()
{
	ivec3 pixelCoords = ivec3(gl_GlobalInvocationID);
	ivec3 imageSize   = imageSize(ImgOutput);

	if (pixelCoords.x >= imageSize.x || 
	    pixelCoords.y >= imageSize.y || 
		pixelCoords.z >= imageSize.z)
		return;

	vec3  normalizedCoords = vec3(pixelCoords.x / float(imageSize.x - 1), 
	                              pixelCoords.y / float(imageSize.y - 1),
   	                              pixelCoords.z / float(imageSize.z - 1));

	int   totalCellsA      = NumCellsA * NumCellsA * NumCellsA;
	int   totalCellsB      = NumCellsB * NumCellsB * NumCellsB;

	float layerA           = worley(0,                         NumCellsA, normalizedCoords);
	float layerB           = worley(totalCellsA,               NumCellsB, normalizedCoords);
	float layerC           = worley(totalCellsA + totalCellsB, NumCellsC, normalizedCoords);

	float sum              = layerA + layerB * Persistance + layerC * Persistance * Persistance;
	      sum             /= 1 + Persistance + Persistance * Persistance;
	      sum              = 1.0 - sum;

	atomicMin(Mn, int(sum * float(MinMaxBufferValue)));
	atomicMax(Mx, int(sum * float(MinMaxBufferValue)));
	
	vec4 initialValue = imageLoad(ImgOutput, pixelCoords);

	imageStore(ImgOutput, pixelCoords, initialValue * (1.0 - ChannelsMask) + sum * ChannelsMask);
}