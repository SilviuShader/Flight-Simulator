#version 430 core
#define BLOCKS_COUNT 8
#define MAX_ITERATIONS 4

layout (local_size_x = BLOCKS_COUNT, local_size_y = BLOCKS_COUNT, local_size_z = 1) in;
layout (r32f, binding = 0) uniform image2D ImageInput;
layout (r32f, binding = 1) uniform image2D ImageOutput;

uniform int Iterations;

shared float s_maxValues[BLOCKS_COUNT * BLOCKS_COUNT];

void storeMax(uint index, float value)
{
	s_maxValues[index] = value;
}

float loadMax(uint index)
{
	return s_maxValues[index];
}

void main()
{
	ivec2 imgSize     = imageSize(ImageInput);
	ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);

	if (pixelCoords.x >= imgSize.x / 2 || 
	    pixelCoords.y >= imgSize.y / 2)
		return;

	float max1 = imageLoad(ImageInput, pixelCoords * 2).x;
	float max2 = imageLoad(ImageInput, pixelCoords * 2 + ivec2(1, 0)).x;
	float max3 = imageLoad(ImageInput, pixelCoords * 2 + ivec2(0, 1)).x;
	float max4 = imageLoad(ImageInput, pixelCoords * 2 + ivec2(1, 1)).x;

	float mxm  = max(max(max1, max2),  max(max3, max4));

	storeMax(gl_LocalInvocationIndex, mxm);

	if (Iterations == 1)
	{
		imageStore(ImageOutput, pixelCoords, vec4(mxm));
		return;
	}

	groupMemoryBarrier();
	barrier();

	if ((gl_LocalInvocationIndex & 0x9) == 0)
	{
		max1 = mxm;
		max2 = loadMax(gl_LocalInvocationIndex + 0x01);
		max3 = loadMax(gl_LocalInvocationIndex + 0x08);
		max4 = loadMax(gl_LocalInvocationIndex + 0x09);

		mxm = max(max(max1, max2), max(max3, max4));

		storeMax(gl_LocalInvocationIndex, mxm);

		if (Iterations == 2)
		{
			imageStore(ImageOutput, pixelCoords / 2, vec4(mxm));
			return;
		}
	}

	if (Iterations == 2)
		return;

	groupMemoryBarrier();
	barrier();

	if ((gl_LocalInvocationIndex & 0x1B) == 0)
	{
		max1 = mxm;
		max2 = loadMax(gl_LocalInvocationIndex + 0x02);
		max3 = loadMax(gl_LocalInvocationIndex + 0x10);
		max4 = loadMax(gl_LocalInvocationIndex + 0x12);

		mxm = max(max(max1, max2), max(max3, max4));

		storeMax(gl_LocalInvocationIndex, mxm);

		if (Iterations == 3)
		{
			imageStore(ImageOutput, pixelCoords / 4, vec4(mxm));
			return;
		}
	}

	if (Iterations == 3)
		return;

	groupMemoryBarrier();
	barrier();

	if (gl_LocalInvocationIndex == 0)
	{
		max1 = mxm;
		max2 = loadMax(gl_LocalInvocationIndex + 0x04);
		max3 = loadMax(gl_LocalInvocationIndex + 0x20);
		max4 = loadMax(gl_LocalInvocationIndex + 0x24);

		mxm = max(max(max1, max2), max(max3, max4));

		if (Iterations == 4)
		{
			imageStore(ImageOutput, pixelCoords / 8, vec4(mxm));
			return;
		}
	}
}